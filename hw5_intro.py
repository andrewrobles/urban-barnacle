# -*- coding: utf-8 -*-
"""HW5_intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FxR5IKEmIw83ki86NZSSklwLhQKFComm

## getting started
"""

# variables
# : containers to store values

x = "Columbia"
print(x)
print(type(x))

# x = 5
# print(x)
# print(type(x))

# lists
# : container to store multiple values 

x = ["apple", "orange", "banana"]
print(x)

# get length of list
print(len(x))

# get an element of list 
print(x[2])

# for loops
# : iterate over elements in a list 

thislist = [5,10,15]

for x in thislist:

  y = x + 10
  print(y)

# functions
# : blocks of code that runs when called

def add_10(x):

  # code to implement
  y = x + 10
  z = y / 2

  # return result
  return z 

# run function here
add_10(5)

"""## useful libraries
Libraries are useful functions that have been written by others so that you do not need to write the code from scratch
"""

# import libraries

import numpy as np 
import scipy.stats as sp 
import matplotlib.pyplot as plt

# sample from a normal distribution

mean_ = 0
sdev_ = 1

n_samples = 10
s = np.random.normal(loc = mean_, 
                     scale = sdev_, 
                     size=n_samples)
print(s)

# plot the cdf of a normal distribution

mean_, sdev_ = 0, 1
n_samples = 10000
s = np.random.normal(loc = mean_, 
                     scale = sdev_, 
                     size=n_samples)

_ = plt.hist(s, bins=100, cumulative=True, density=True)

# inverse cdf function

# borrowers defaults with 5 percent probability
# borrower's income is drawn from N(0,1) distribution.
# default if income less than x 
# what is x? 

p = 0.05
x = sp.norm.ppf(p, 0, 1)
print(x)

"""## an example

an investor lends 10 borrowers 1 dollar each.

Each borrower's income is drawn from iid N(0,1).

Borrower defaults if income less than -1.65.

If don't default, pay investor 1 dollars.

If default, pay investor 0.
"""

# parameters of the problem

n_borrowers = 10
mean_income = 0
sdev_income = 1
threshold = -1.65

# assume the following realization of income

np.random.seed(123)
income = np.random.normal(loc=mean_income, 
                          scale=sdev_income, 
                          size=n_borrowers)
print(income)

# which borrower defaults?

print(income < threshold)

loan_payoff = (income < threshold) * 0 + (income >= threshold) * 1
print(loan_payoff)

# what is the investor's total payoff?

total_payoff = np.sum(loan_payoff)
print(total_payoff)

"""now, suppose there are two investors. 

investor A funds 6 dollars, investor B funds 4 dollars.

the investors agree to a 60:40 split of the loan payoffs.

investor A is senior, so she gets paid first.

investor B then gets paid the remainder.
"""

# how much does investor A get in return

a_payoff = min(.6 * 10, total_payoff)
print(a_payoff)

# how much does investor B get in return?

b_payoff = min(.4 * 10, total_payoff - a_payoff)
print(b_payoff)

"""## misc"""

# example of for loop

rho_list = [0, 0.1, 0.25, 0.5, 0.75, 0.9, 1]

n_borrowers = 10

s = np.random.normal(loc=0, scale=1, size=1)

eps = np.random.normal(loc=0, scale=1, size=n_borrowers)

for rho in rho_list:

  # borrower's income

  x = np.sqrt(rho) * s + (1-np.sqrt(rho)) * eps

  # total income across all borrower's

  y = np.sum(x)
  print(y)

